#!/usr/bin/env ruby

require 'thor'
require 'pry'

class Srcbuild < Thor

    no_commands {

        def runInDocker(cmd, workdir: nil, extraargs: "", interactive: false, entrypoint: "")
            workdirarg = ""
            workdirarg = "-w #{workdir}" unless workdir.nil?
            extraargs = extraargs + " -ti" if interactive
            Kernel.system "mkdir -p #{root}/build"
            Kernel.system "mkdir -p #{root}/install"
            Kernel.system "xhost +local:root"
            commandline = "docker run --rm #{extraargs} -v #{root}:/src -v #{root}/build:/build -v #{root}/install:/install #{workdirarg} --entrypoint='#{entrypoint}' kubedev #{cmd}"
            # puts "Using the workdir: #{root}"
            # puts "Cmd: #{cmd}"
            puts "Commandline: #{commandline}"
            Kernel.exec commandline
        end

        def project
            currentDir = Dir.pwd.split('/').last
            if currentDir == root.split('/').last
                return ""
            end
            return currentDir
        end

        def root
            "#{Dir.home}/src"
        end

        def hostProjectDir
            "#{root}/build/#{project}".chomp '/'
        end

        def dockerSrcDir
            "/src/#{project}".chomp '/'
        end

        def dockerBuildDir
            "/build/#{project}".chomp '/'
        end

        def docker_options_x11
            "--security-opt seccomp:unconfined -v /tmp/.docker.xauth:/tmp/.docker.xauth -v /tmp/.X11-unix:/tmp/.X11-unix --device /dev/dri/card0:/dev/dri/card0 -e DISPLAY=#{ENV['DISPLAY']} -e XAUTHORITY=/tmp/.docker.xauth --privileged"
        end

        def cpuCores
            `nproc`.chomp
        end
    }

    desc "enter", "Enter shell."
    def enter
        runInDocker '', workdir: dockerBuildDir, interactive: true, extraargs: docker_options_x11, entrypoint: "/bin/bash"
    end

    desc "configure", "Configure builddir."
    def configure(*args)
        system "mkdir -p #{hostProjectDir}"
        cmake_options="-DCMAKE_PREFIX_PATH=/install -DCMAKE_INSTALL_PREFIX=/install -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=debug -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ " + args.join(' ')
        cmake_options = cmake_options.chomp

        puts "CMake Options: " + cmake_options
        runInDocker "cmake #{cmake_options} #{dockerSrcDir}", workdir: dockerBuildDir, interactive: $stdout.isatty
    end

    desc "wipe", "Wipe builddir."
    def wipe
        puts "rm -Rf #{dockerBuildDir}/*"
        runInDocker "rm -Rf #{dockerBuildDir}"
    end

    desc "make", "Build."
    def make(*args)
        #Without unconfied moc will fail on clean builds in sink
        runInDocker "make -j#{cpuCores} #{args.join(' ')}".chomp(' '), workdir: dockerBuildDir, interactive: $stdout.isatty, extraargs: "--security-opt seccomp:unconfined"
    end

    desc "exec", "Run."
    def exec(*args)
        runInDocker args.join(' '), workdir: dockerBuildDir, extraargs: docker_options_x11, interactive: true, entrypoint: "/bin/bash"
    end

    desc "test", "Run tests"
    def test
        runInDocker "bash -c '/home/developer/startimap.sh && ctest -E memcheck -V'", workdir: dockerBuildDir, extraargs: docker_options_x11, interactive: true
    end

    desc "edit", "Edit CMakeCache.txt"
    def edit
        system "$EDITOR #{hostProjectDir}/CMakeCache.txt"
    end

    desc "build", "Build a set"
    def build(set)
        if set == "kube"
            repositories = [
                {name: "flatbuffers", url: "github:google/flatbuffers", checkout: "v1.6.0"},
                {name: "kdav2", url: "kde:kdav2", checkout: "master"},
                {name: "kimap2", url: "kde:kimap2", checkout: "master"},
                {name: "kasync", url: "kde:kasync", checkout: "master"},
                {name: "sink", url: "kde:sink", checkout: "develop"},
                {name: "kube", url: "kde:kube", checkout: "develop"},
            ]
            Dir.chdir root do
                system "mkdir -p build"
                system "mkdir -p install"
                for repo in repositories
                    projectName = repo[:name]
                    puts "Building " + projectName + " From " + repo[:url]
                    unless Dir.exists? projectName
                        system "git clone #{repo[:url]}"
                    end
                    Dir.chdir projectName do
                        system "git checkout #{repo[:branch]}"
                        system "git pull"
                        configure()
                        make "install"
                    end
                end
            end
        else
            puts "Unknown set " + set
        end
    end

end

begin
    Srcbuild.start(ARGV)
rescue => e
    puts e.message
    puts e.backtrace.inspect
end
